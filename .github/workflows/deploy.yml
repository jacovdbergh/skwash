name: Deploy

# Deploy master on push
on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.todo'

permissions:
  contents: read
  id-token: write

env:
  OIDC_ROLE: arn:aws:iam::779498940176:role/berghtech-OIDC-GHActions-role
  DEPLOYMENT_REGION: af-south-1
  DEPLOYMENT_STAGE: production
  DEPLOYMENT_NAME: skwash
  PHP_VERSION: '8.0'
  PHP_EXTENSIONS: 'curl, dom, bcmath, mbstring, zip'

jobs:

  deploy-assets:
    name: Deploy assets
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2

      - name: Obtain NPM Cache directory
        id: npm-cache-dir
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Cache NPM dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - uses: bahmutov/npm-install@v1

      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ${{ env.PHP_EXTENSIONS }}

      - uses: ramsey/composer-install@v1
        with:
          composer-options: "--prefer-dist --no-dev --optimize-autoloader --ignore-platform-reqs"

      - name: Laravel Mix
        run: npm run prod

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ env.OIDC_ROLE }}
          role-session-name: ${{ env.DEPLOYMENT_NAME }}-assets-deployer
          aws-region: ${{ env.DEPLOYMENT_REGION }}

      - name: Upload assets to s3
        run: aws s3 sync ./public s3://${{ env.DEPLOYMENT_NAME }}-prod-assets --delete --exclude 'index.php' --exclude '.htaccess' --exclude 'robots.txt' --exclude 'web.config'

  deploy-serverless:
    name: Deploy Serverless stack
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2

      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ${{ env.PHP_EXTENSIONS }}

      - uses: ramsey/composer-install@v1
        with:
          composer-options: "--prefer-dist --no-dev --optimize-autoloader --ignore-platform-reqs"

      - name: Obtain NPM Cache directory
        id: npm-cache-dir
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Cache NPM dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package.lock') }}
          restore-keys: ${{ runner.os }}-npm-

      - uses: bahmutov/npm-install@v1

      - name: Laravel Mix
        run: npm run prod

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ env.OIDC_ROLE }}
          role-session-name: ${{ env.DEPLOYMENT_NAME }}-code-deployer
          aws-region: ${{ env.DEPLOYMENT_REGION }}

      - name: Serverless Deploy
        uses: serverless/github-action@v2.18.0
        with:
          args: deploy
        env:
          RELEASE_HASH: ${{ github.sha }}

  migrate-db:
    name: Run database migrations
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [ deploy-serverless ]
    steps:
      - uses: actions/checkout@v2

      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ${{ env.PHP_EXTENSIONS }}

      - uses: ramsey/composer-install@v1
        with:
          composer-options: "--prefer-dist --no-dev --optimize-autoloader --ignore-platform-reqs"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ env.OIDC_ROLE }}
          role-session-name: ${{ env.DEPLOYMENT_NAME }}-migrations-deployer
          aws-region: ${{ env.DEPLOYMENT_REGION }}

      - name: Run database migration
      # function name is {service}-{stage}-artisan
        run: vendor/bin/bref cli ${{ env.DEPLOYMENT_NAME }}-production-artisan -- migrate --force --ansi --no-interaction
        env:
          AWS_DEFAULT_REGION: ${{ env.DEPLOYMENT_REGION }}
